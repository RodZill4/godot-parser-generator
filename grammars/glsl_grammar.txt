top:
 translation_unit
 expression
variable_identifier:
 IDENTIFIER
primary_expression:
 variable_identifier
 INTCONSTANT
 FLOATCONSTANT
 BOOLCONSTANT
 ( expression )
postfix_expression:
 primary_expression
 postfix_expression LEFT_BRACKET integer_expression RIGHT_BRACKET
 function_call
 postfix_expression DOT FIELD_SELECTION
 postfix_expression ++
 postfix_expression --
integer_expression:
 expression
function_call:
 function_call_or_method
function_call_or_method:
 function_call_generic
 postfix_expression DOT function_call_generic
function_call_generic:
 function_call_header_with_parameters )
 function_call_header_no_parameters )
function_call_header_no_parameters:
 function_call_header VOID
 function_call_header
function_call_header_with_parameters:
 function_call_header assignment_expression
 function_call_header_with_parameters , assignment_expression
function_call_header:
 function_identifier (
// Grammar Note: Constructors look like functions, but lexical analysis recognized most of them as
// keywords. They are now recognized through "type_specifier".
function_identifier:
 type_specifier
 IDENTIFIER
 FIELD_SELECTION
unary_expression:
 postfix_expression
 ++ unary_expression
 -- unary_expression
 unary_operator unary_expression
// Grammar Note: No traditional style type casts.
unary_operator:
 +
 -
 !
 ~ // reserved
// Grammar Note: No '*' or '&' unary ops. Pointers are not supported.
multiplicative_expression:
 unary_expression
 multiplicative_expression * unary_expression
 multiplicative_expression / unary_expression
 multiplicative_expression % unary_expression // reserved
additive_expression:
 multiplicative_expression
 additive_expression + multiplicative_expression
 additive_expression - multiplicative_expression
shift_expression:
 additive_expression
 shift_expression LEFT_OP additive_expression // reserved
 shift_expression RIGHT_OP additive_expression // reserved
relational_expression:
 shift_expression
 relational_expression LEFT_ANGLE shift_expression
 relational_expression RIGHT_ANGLE shift_expression
 relational_expression LE_OP shift_expression
 relational_expression GE_OP shift_expression
equality_expression:
 relational_expression
 equality_expression EQ_OP relational_expression
 equality_expression NE_OP relational_expression
and_expression:
 equality_expression
 and_expression AMPERSAND equality_expression // reserved
exclusive_or_expression:
 and_expression
 exclusive_or_expression CARET and_expression // reserved
inclusive_or_expression:
 exclusive_or_expression
 inclusive_or_expression VERTICAL_BAR exclusive_or_expression // reserved
logical_and_expression:
 inclusive_or_expression
 logical_and_expression AND_OP inclusive_or_expression
logical_xor_expression:
 logical_and_expression
 logical_xor_expression XOR_OP logical_and_expression
logical_or_expression:
 logical_xor_expression
 logical_or_expression OR_OP logical_xor_expression
conditional_expression:
 logical_or_expression
 logical_or_expression QUESTION expression COLON assignment_expression
assignment_expression:
 conditional_expression
 unary_expression assignment_operator assignment_expression
assignment_operator:
 EQUAL
 MUL_ASSIGN
 DIV_ASSIGN
 MOD_ASSIGN // reserved
 ADD_ASSIGN
 SUB_ASSIGN
 LEFT_ASSIGN // reserved
 RIGHT_ASSIGN // reserved
 AND_ASSIGN // reserved
 XOR_ASSIGN // reserved
 OR_ASSIGN // reserved
expression:
 assignment_expression
 expression , assignment_expression
constant_expression:
 conditional_expression
declaration:
 function_prototype ;
 init_declarator_list ;
function_prototype:
 function_declarator )
function_declarator:
 function_header
 function_header_with_parameters
function_header_with_parameters:
 function_header parameter_declaration
 function_header_with_parameters , parameter_declaration
function_header:
 fully_specified_type IDENTIFIER (
parameter_declarator:
 type_specifier IDENTIFIER
 type_specifier IDENTIFIER LEFT_BRACKET constant_expression RIGHT_BRACKET
parameter_declaration:
 type_qualifier parameter_qualifier parameter_declarator
 parameter_qualifier parameter_declarator
 type_qualifier parameter_qualifier parameter_type_specifier
 parameter_qualifier parameter_type_specifier
parameter_qualifier:
 /* empty */
 IN
 OUT
 INOUT
parameter_type_specifier:
 type_specifier
init_declarator_list:
 single_declaration
 init_declarator_list , IDENTIFIER
 init_declarator_list , IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
 init_declarator_list , IDENTIFIER LEFT_BRACKET constant_expression RIGHT_BRACKET
 init_declarator_list , IDENTIFIER LEFT_BRACKET RIGHT_BRACKET EQUAL initializer
 init_declarator_list , IDENTIFIER LEFT_BRACKET constant_expression RIGHT_BRACKET EQUAL initializer
 init_declarator_list , IDENTIFIER EQUAL initializer
single_declaration:
 fully_specified_type
 fully_specified_type IDENTIFIER
 fully_specified_type IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
 fully_specified_type IDENTIFIER LEFT_BRACKET constant_expression RIGHT_BRACKET
 fully_specified_type IDENTIFIER LEFT_BRACKET RIGHT_BRACKET EQUAL initializer
 fully_specified_type IDENTIFIER LEFT_BRACKET constant_expression RIGHT_BRACKET EQUAL initializer
 fully_specified_type IDENTIFIER EQUAL initializer
 INVARIANT IDENTIFIER // Vertex only.
// Grammar Note: No 'enum', or 'typedef'.
fully_specified_type:
 type_specifier
 type_qualifier type_specifier
type_qualifier:
 CONST
 ATTRIBUTE // Vertex only.
 VARYING
 CENTROID VARYING
 INVARIANT VARYING
 INVARIANT CENTROID VARYING
 UNIFORM
type_specifier:
 type_specifier_nonarray
 type_specifier_nonarray LEFT_BRACKET constant_expression RIGHT_BRACKET
type_specifier_nonarray:
 TYPE
 struct_specifier
 TYPE_NAME
struct_specifier:
 STRUCT IDENTIFIER LEFT_BRACE struct_declaration_list RIGHT_BRACE
 STRUCT LEFT_BRACE struct_declaration_list RIGHT_BRACE
struct_declaration_list:
 struct_declaration
 struct_declaration_list struct_declaration
struct_declaration:
 type_specifier struct_declarator_list ;
struct_declarator_list:
 struct_declarator
 struct_declarator_list , struct_declarator
struct_declarator:
 IDENTIFIER
 IDENTIFIER LEFT_BRACKET constant_expression RIGHT_BRACKET
initializer:
 assignment_expression
declaration_statement:
 declaration
statement:
 compound_statement
 simple_statement
// Grammar Note: No labeled statements; 'goto' is not supported.
simple_statement:
 declaration_statement
 expression_statement
 selection_statement
 iteration_statement
 jump_statement
compound_statement:
 LEFT_BRACE RIGHT_BRACE
 LEFT_BRACE statement_list RIGHT_BRACE
statement_no_new_scope:
 compound_statement_no_new_scope
 simple_statement
compound_statement_no_new_scope:
 LEFT_BRACE RIGHT_BRACE
 LEFT_BRACE statement_list RIGHT_BRACE
statement_list:
 statement
 statement_list statement
expression_statement:
 ;
 expression ;
selection_statement:
 IF ( expression ) selection_rest_statement
selection_rest_statement:
 statement ELSE statement
 statement
// Grammar Note: No 'switch'. Switch statements not supported.
condition:
 expression
 fully_specified_type IDENTIFIER EQUAL initializer
iteration_statement:
 WHILE ( condition ) statement_no_new_scope
 DO statement WHILE ( expression ) ;
 FOR ( for_init_statement for_rest_statement ) statement_no_new_scope
for_init_statement:
 expression_statement
 declaration_statement
conditionopt:
 condition
 /* empty */
for_rest_statement:
 conditionopt ;
 conditionopt ; expression
jump_statement:
 CONTINUE ;
 BREAK ;
 RETURN ;
 RETURN expression ;
 DISCARD ; // Fragment shader only.
// Grammar Note: No 'goto'. Gotos are not supported.
translation_unit:
 external_declaration
 translation_unit external_declaration
external_declaration:
 function_definition
 declaration
function_definition:
 function_prototype compound_statement_no_new_scope
